//////////////////////////////////////////////////////////////////////////////////
//	Name		:	SLua
//
//	Description	:	Lua Library Interface for Script System
//////////////////////////////////////////////////////////////////////////////////
#ifndef COLD_SCRIPT_SYSTEM_LUA
#define COLD_SCRIPT_SYSTEM_LUA
#include "LuaHeader.h"
#include "string"

class SLua
{
private:
	lua_State *m_LuaState;	//	The Current Lua State
	std::string m_szEntrance;	//	The entrance function
	int m_nNumArguments, m_nNumReturned;
public:
	//	Constructor
	SLua(void);
	SLua(const char *szFile, const char szEntrance);
	//	Destructor
	~SLua(void);

	//////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Accessors
	//////////////////////////////////////////////////////////////////////////////////
	lua_State *GetLuaState()	{	return m_LuaState;	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Load lua as the scripting language
	///////////////////////////////////////////////////////////////////////////////////////////////
	void OpenState(void);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Lock and open the current file we are using
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool OpenFile(const char *szFile);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Set the entrance of the script file
	///////////////////////////////////////////////////////////////////////////////////////////////
	void SetEntrance(const char *szEntrance);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Close the Currently open script filed
	///////////////////////////////////////////////////////////////////////////////////////////////
	void CloseFile();

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Register a function to use in the scripting language
	///////////////////////////////////////////////////////////////////////////////////////////////
	void RegisterFunction(const char *szFuncName, void *function);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Lock a function to be used by the scriping language
	///////////////////////////////////////////////////////////////////////////////////////////////
	void LockFunction(const char *szName);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Set data members related to a function that will be called
	///////////////////////////////////////////////////////////////////////////////////////////////
	void SetFunctionData(const char *szName, int numReturns, int numArguments);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Call a function that resides in the script
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool CallFunction();
	bool CallFunction(const char *szName, int numReturns, int numArguments);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Call Script using the entrance function
	///////////////////////////////////////////////////////////////////////////////////////////////
	bool UseScript();

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Lock a variable to be used by the scriping language
	///////////////////////////////////////////////////////////////////////////////////////////////
	void LockVariable(const char *szName);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Push a variable into the object stack
	///////////////////////////////////////////////////////////////////////////////////////////////
	void PushVariable(int var);
	void PushVariable(unsigned int var);
	void PushVariable(double var);
	void PushVariable(const char *szVar);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Pop an object off stack
	///////////////////////////////////////////////////////////////////////////////////////////////
	std::string PopString(int var = -1);
	int PopInt(int var = -1);
	double PopDouble(int var = -1);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Pop an object off the stack
	///////////////////////////////////////////////////////////////////////////////////////////////
	void PopStack(int var = -1);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Returns the Index of the top of the stack
	///////////////////////////////////////////////////////////////////////////////////////////////
	int GetTopOfStack(void);

	///////////////////////////////////////////////////////////////////////////////////////////////
	//	Description	:	Shutdown the scripting langauge and clean up any used memory
	///////////////////////////////////////////////////////////////////////////////////////////////
	void CloseState(void);
};

#endif